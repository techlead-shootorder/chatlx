generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id              String   @id @default(uuid())
  userId          String   @unique
  planType        PlanType @default(TRIAL)
  startDate       DateTime @default(now())
  endDate         DateTime
  isActive        Boolean  @default(true)
  requestsUsed    Int      @default(0)
  tokensUsed      Int      @default(0)
  maxRequests     Int
  maxTokens       Int
  trialDaysLeft   Int?     @default(14)
  chatbotsCreated Int      @default(0)
  user            User     @relation(fields: [userId], references: [id])
}

model PaymentOrder {
  id        String   @id @default(uuid())
  orderId   String   @unique
  userId    String
  planType  PlanType
  amount    Float
  status    String
  paymentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model RazorpaySubscription {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String   @unique
  planId         String
  planType       PlanType
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Chatbot {
  id                 String         @id @default(uuid())
  companyName        String
  companyDescription String?
  industry           String?
  location           String?
  operatingHours     String?
  email              String?
  phone              String?
  address            String?
  pricing            String?
  serviceAreas       String?
  botName            String
  welcomeMessage     String?
  fallbackMessage    String?
  personality        String?
  isDefault          Boolean        @default(false)
  createdBy          String?
  services           Json?
  pills              Json?
  howToUse           String?
  subtext            String?
  logo               String?
  createdAt          DateTime       @default(now())
  isActive           Boolean        @default(true)
  conversationsCount Int            @default(0)
  tokensUsed         Int            @default(0)
  fontColor          String         @default("#ffffff")
  primaryColor       String         @default("#181818")
  secondaryColor     String         @default("#303030")
  metaDescription    String         @default("Chatlx is an AI-powered chatbot designed to streamline customer interactions, enhance user engagement, and provide instant support across industries.")
  metaTitle          String         @default("Chatlx - AI-Powered")
  user               User?          @relation(fields: [createdBy], references: [id])
  Conversation       Conversation[]
  integrations       Integration[]
  leads              Lead[]
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String?
  createdAt             DateTime               @default(now())
  company               String?
  fullName              String?
  phone                 String?
  timezone              String?                @default("UTC")
  chatbots              Chatbot[]
  Customer              Customer[]
  Feedback              Feedback[]
  leads                 Lead[]                 @relation("UserLeads")
  paymentOrders         PaymentOrder[]
  razorpaySubscriptions RazorpaySubscription[]
  subscription          Subscription?
  SupportTicket         SupportTicket[]
}

model Lead {
  id             String         @id @default(uuid())
  name           String?
  email          String?
  phone          String?
  messages       Json[]
  status         String         @default("new")
  source         String         @default("chatbot")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  chatbotId      String
  userId         String?
  tokensUsed     Int            @default(0)
  localCreatedAt DateTime?
  location       String?
  timezone       String?        @default("UTC")
  Conversation   Conversation[]
  chatbot        Chatbot        @relation(fields: [chatbotId], references: [id])
  user           User?          @relation("UserLeads", fields: [userId], references: [id])
}

model Integration {
  id                String   @id @default(uuid())
  logo              String?
  chatbotId         String?
  domain            String?
  pills             Json?
  subText           String?
  initialMessage    String?
  phone             String?
  isWhatsappEnabled Boolean  @default(false)
  whatsappConfig    Json?
  chatbot           Chatbot? @relation(fields: [chatbotId], references: [id])
}

model Conversation {
  id           String             @id
  sessionId    String             @unique
  chatbotId    String
  leadId       String?
  messages     Json[]
  tokensUsed   Int                @default(0)
  messageCount Int                @default(0)
  status       ConversationStatus @default(ACTIVE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  timezone     String?            @default("UTC")
  Chatbot      Chatbot            @relation(fields: [chatbotId], references: [id])
  Lead         Lead?              @relation(fields: [leadId], references: [id])
}

model Customer {
  id          String   @id
  fullName    String
  email       String
  phone       String
  company     String?
  address     String
  city        String
  state       String
  postalCode  String
  gstin       String?
  countryCode String   @default("+91")
  country     String   @default("IN")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String?
  User        User?    @relation(fields: [userId], references: [id])
  Order       Order[]
}

model Documentation {
  id         String    @id
  title      String
  slug       String    @unique
  content    String
  excerpt    String?
  category   String
  section    String
  status     DocStatus @default(PUBLISHED)
  featured   Boolean   @default(false)
  views      Int       @default(0)
  readTime   Int?
  tags       String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  authorId   String?
  authorName String?
}

model Feedback {
  id                 String               @id
  title              String
  description        String
  type               FeedbackType
  category           String?
  priority           FeedbackPriority     @default(MEDIUM)
  rating             Int?
  status             FeedbackStatus       @default(PENDING)
  email              String?
  votes              Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  userId             String?
  User               User?                @relation(fields: [userId], references: [id])
  FeedbackAttachment FeedbackAttachment[]
}

model FeedbackAttachment {
  id           String   @id
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())
  feedbackId   String
  Feedback     Feedback @relation(fields: [feedbackId], references: [id])
}

model Order {
  id               String           @id
  orderId          String           @unique
  customerId       String
  planId           String
  amount           Float
  subtotal         Float
  gst              Float
  gstRate          Float            @default(18)
  currency         String           @default("INR")
  status           OrderStatus      @default(PENDING)
  paymentId        String?
  paymentMethod    String?
  razorpayOrderId  String?
  notes            Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  Customer         Customer         @relation(fields: [customerId], references: [id])
  SubscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
}

model SubscriptionPlan {
  id            String   @id
  name          String
  slug          String   @unique
  price         Float
  originalPrice Float?
  duration      String
  features      Json
  isPopular     Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Order         Order[]
}

model SupportTicket {
  id               String             @id
  ticketId         String             @unique
  title            String
  description      String
  category         TicketCategory
  priority         TicketPriority
  status           TicketStatus       @default(OPEN)
  environment      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  resolvedAt       DateTime?
  userId           String?
  email            String
  name             String
  assigneeId       String?
  tags             String[]
  User             User?              @relation(fields: [userId], references: [id])
  TicketAttachment TicketAttachment[]
  TicketMessage    TicketMessage[]
}

model TicketAttachment {
  id            String        @id
  filename      String
  originalName  String
  mimeType      String
  size          Int
  url           String
  uploadedAt    DateTime      @default(now())
  ticketId      String
  SupportTicket SupportTicket @relation(fields: [ticketId], references: [id])
}

model TicketMessage {
  id            String            @id
  content       String
  isInternal    Boolean           @default(false)
  authorType    MessageAuthorType
  authorId      String?
  authorName    String?
  authorEmail   String?
  createdAt     DateTime          @default(now())
  ticketId      String
  SupportTicket SupportTicket     @relation(fields: [ticketId], references: [id])
}

enum PlanType {
  BASIC
  PRO
  ENTERPRISE
  TRIAL
  ADMIN
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  BLOCKED
}

enum DocStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
}

enum FeedbackStatus {
  PENDING
  UNDER_REVIEW
  IN_PROGRESS
  PLANNED
  COMPLETED
  REJECTED
}

enum FeedbackType {
  FEATURE_REQUEST
  BUG_REPORT
  GENERAL_FEEDBACK
  COMPLIMENT
}

enum MessageAuthorType {
  USER
  SUPPORT
  SYSTEM
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  INTEGRATION
  GENERAL
  FEATURE_REQUEST
  BUG_REPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_RESPONSE
  RESOLVED
  CLOSED
  CANCELLED
}
